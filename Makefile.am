ACLOCAL_AMFLAGS = -I m4

# note: include builddir first in case wrappers are regenerated there
AM_CPPFLAGS = -D_GNU_SOURCE $(VDE_CPPFLAGS) \
  -I$(top_srcdir)/src/include/ -I$(top_builddir)/src/ -I$(top_srcdir)/src/

AM_CFLAGS = $(VDE_CFLAGS) $(GLIB_CFLAGS) $(JSONC_CFLAGS)

GEN_CHECKER = $(top_srcdir)/src/gen_checker.py

# autogenerated sources and wrappers for commands
WRAPPERS_SRC = \
  src/engine_ctrl_commands.c \
  src/engine_hub_commands.c
WRAPPERS_HDR = $(subst .c,.h,$(WRAPPERS_SRC))
WRAPPERS_JSON = $(subst .c,.json,$(WRAPPERS_SRC))

# generate wrappers before other sources
BUILT_SOURCES = $(WRAPPERS_SRC)

CLEANFILES = $(WRAPPERS_SRC) $(WRAPPERS_HDR)

EXTRA_DIST = $(GEN_CHECKER) $(WRAPPERS_JSON) \
  README.rst TODO src/test_console.py

include_HEADERS = src/include/vde3.h

noinst_HEADERS = \
  src/include/vde3/localconnection.h \
  src/include/vde3/common.h \
  src/include/vde3/attributes.h \
  src/include/vde3/signal.h \
  src/include/vde3/packet.h \
  src/include/vde3/component.h \
  src/include/vde3/engine.h \
  src/include/vde3/transport.h \
  src/include/vde3/conn_manager.h \
  src/include/vde3/connection.h \
  src/include/vde3/command.h \
  src/include/vde3/context.h \
  src/include/vde3/module.h \
  src/include/vde3/vde_ordhash.h

VDE_SRC = \
  src/context.c \
  src/component.c \
  src/logging.c \
  src/module.c \
  src/connection.c \
  src/localconnection.c \
  src/common.c \
  src/signal.c \
  src/vde_ordhash.c

# autogenerated commands must have a corresponding .json "source"
$(WRAPPERS_SRC): $(WRAPPERS_JSON) $(GEN_CHECKER)
	$(AM_V_GEN)$(PYTHON) $(GEN_CHECKER) -q -o $(top_builddir)/src/ \
	                                    $(top_srcdir)/$(subst .c,.json,$@)

# explicitly remove generated files from dist.
# this shouldn't be necessary, BUILT_SOURCES are not supposed to be dist-ed
# (see http://www.mail-archive.com/automake@gnu.org/msg02786.html)
dist-hook:
	rm -f $(addprefix $(top_distdir)/,$(WRAPPERS_SRC))
	rm -f $(addprefix $(top_distdir)/,$(WRAPPERS_HDR))

bin_PROGRAMS = src/vde_hub src/vde_hub2hub tests/speedtest tests/speedtest_recv


# dynamic modules
modulesdir = $(pkglibdir)

modules_LTLIBRARIES = src/engine_ctrl.la
src_engine_ctrl_la_SOURCES = src/engine_ctrl.c src/engine_ctrl_commands.c
src_engine_ctrl_la_LDFLAGS = -module -avoid-version -export-dynamic

modules_LTLIBRARIES += src/engine_hub.la
src_engine_hub_la_SOURCES = src/engine_hub.c src/engine_hub_commands.c
src_engine_hub_la_LDFLAGS = -module -avoid-version -export-dynamic

modules_LTLIBRARIES += src/conn_manager.la
src_conn_manager_la_LDFLAGS = -module -avoid-version -export-dynamic

modules_LTLIBRARIES += src/transport_vde2.la
src_transport_vde2_la_LDFLAGS = -module -avoid-version -export-dynamic

# libvde
lib_LTLIBRARIES = src/libvde.la
src_libvde_la_SOURCES = $(VDE_SRC)
# XXX consider adding -export-symbols <file.sym>
src_libvde_la_LDFLAGS = $(GLIB_LIBS) $(JSONC_LIBS) -ldl -export-dynamic \
  -version-info $(LIBVDE_VERSION) 
# XXX define this better
src_libvde_la_CPPFLAGS = \
  -DVDE_DEFAULT_MODULES_PATH='{"$(modulesdir)", "src/.libs", NULL}' \
  $(AM_CPPFLAGS)

# vde_hub
src_vde_hub_SOURCES = src/vde_hub.c src/libevent_handler.c
src_vde_hub_LDADD = src/libvde.la $(JSONC_LIBS)
src_vde_hub_LDFLAGS = -levent

# vde_hub2hub
src_vde_hub2hub_SOURCES = src/vde_hub2hub.c src/libevent_handler.c
src_vde_hub2hub_LDADD = src/libvde.la $(JSONC_LIBS)
src_vde_hub2hub_LDFLAGS = -levent

# speedtest
tests_speedtest_SOURCES = tests/speedtest.c
tests_speedtest_CFLAGS = $(AM_CFLAGS) $(CHECK_CFLAGS) -I$(top_srcdir)/src/include/
tests_speedtest_LDADD = $(CHECK_LIBS) -lvdeplug
tests_speedtest_recv_SOURCES = tests/speedtest_recv.c
tests_speedtest_recv_CFLAGS = $(AM_CFLAGS) $(CHECK_CFLAGS) -I$(top_srcdir)/src/include/
tests_speedtest_recv_LDADD = $(CHECK_LIBS) -lvdeplug

if CHECK
TESTS = tests/check_context tests/check_vde_ordhash
check_PROGRAMS = tests/check_context tests/check_vde_ordhash
tests_check_context_SOURCES = tests/check_context.c
tests_check_context_CFLAGS = $(AM_CFLAGS) $(CHECK_CFLAGS) -I$(top_srcdir)/src/include/
tests_check_context_LDADD = $(CHECK_LIBS) src/libvde.la
tests_check_vde_ordhash_SOURCES = tests/check_vde_ordhash.c
tests_check_vde_ordhash_CFLAGS = $(AM_CFLAGS) $(CHECK_CFLAGS) -I$(top_srcdir)/src/include/
tests_check_vde_ordhash_LDADD = $(CHECK_LIBS) src/libvde.la

val_default_opts = --tool=memcheck -q --show-reachable=yes \
  --leak-check=yes --num-callers=20 --track-fds=yes --read-var-info=yes \
  --track-origins=yes
# --log-file=<logfile>

if VALGRIND
check-valgrind:
	for t in $(TESTS); do \
	  G_SLICE=always_malloc G_DEBUG=gc-friendly libtool --mode execute \
	    $(VALGRIND) --suppressions=$(top_srcdir)/tests/valgrind.supp \
	      $(val_default_opts) $(VALGRIND_OPTS) $$t; \
	done
else
check-valgrind:
	$(error "valgrind not found during configure")
endif # VALGRIND
else
check:
	$(error "check not found during configure")
endif # CHECK


if DOXYGEN
doxyinstdir = $(DESTDIR)$(htmldir)/doxygen/

doxygen: doc/doxygen/html/index.html

doc/doxygen/html/index.html: doc/Doxyfile $(include_HEADERS) $(noinst_HEADERS)
	$(INSTALL) -d $(top_builddir)/doc/doxygen
	$(AM_V_GEN)$(DOXYGEN) $(top_builddir)/doc/Doxyfile

doxygen-clean:
	-rm -rf $(top_builddir)/doc/doxygen

doxygen-install: doxygen
	$(INSTALL) -d $(doxyinstdir)
	(cd $(top_builddir)/doc/doxygen/html && \
	for d in `find . -type d`; do $(INSTALL) -m755 -d  $(doxyinstdir)/$$d; done && \
	for f in `find . -type f`; do $(INSTALL) -m644 $$f $(doxyinstdir)/$$f; done )

doxygen-uninstall:
	-rm -rf $(doxyinstdir)
else
doxygen-clean:
doxygen-install:
doxygen-uninstall:
doxygen:
	$(error "doxygen not found during configure")
endif # DOXYGEN


# automake local targets, invoked on make install/clean/uninstall
install-data-local: doxygen-install

clean-local: doxygen-clean


